from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime
import time

class ConversationTurn(BaseModel):
    speaker: str = Field(default="unknown", description="Speaker identifier")
    text: str = Field(..., description="What the speaker said")
    timestamp: Optional[float] = Field(default=None, description="When this turn happened (Unix timestamp)")

class Transcript(BaseModel):
    conversation_text: str = Field(..., description="Full conversation text")
    turns: Optional[list[ConversationTurn]] = Field(default=None, description="Structured conversation turns")
    timestamp: Optional[float] = Field(default_factory=lambda: time.time(), description="Call timestamp (defaults to now)")
    call_duration: Optional[int] = Field(default=None, description="Duration in seconds")
    call_id: Optional[str] = Field(default=None, description="Unique call identifier")
    participants: Optional[list[str]] = Field(default=None, description="List of participants")
    
    class Config:
        # Allow extra fields for flexibility
        extra = "allow"
